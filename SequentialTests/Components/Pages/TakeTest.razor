@using SequentialTests.Data
@using SequentialTests.Models
@inject ISessionRepository SessionRepository
@inject NavigationManager NavigationManager

<div class="card my-3 p-3">
    <h3>@test.Name</h3>

    <EditForm Model="Model" OnSubmit="Submit">
        @for (int i = 0; i < 6; i++)
        {
            var question = @Model.Questions[i];
            <label>@Model.SortOrders[i] <b>@Model.Tasks[i]</b> @Model.Questions[i]</label>
            <InputText hidden @bind-Value="@Model.Questions[i]" />
            
            @if(Model.IsTrueFalseAnswer[i] == true)
            {
                <InputCheckbox @bind-Value="@Model.BoolAnswers[i]" class="mx-3" />
            }
            @if(Model.IsTrueFalseAnswer[i] == false)
            {
                <InputNumber @bind-Value="@Model.IntAnswers[i]" class="mx-3" />
            }
            <br />
        }
        <div>
            <button type="submit">Submit</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public TestModel? Model { get; set; }

    public Test test = new Test();
    public List<TestItem> testItems = new List<TestItem>();

    public List<TestResultDto> testResults = new List<TestResultDto>();

    public Guid targetId { get; set; } = new Guid("839C1D11-5DC5-48FC-B203-7E2F1566D861");

    protected override async Task OnInitializedAsync()
    {
        Model = new TestModel();

        test = await SessionRepository.GetTestById(targetId);

        Model = await SessionRepository.PopulateTestModel(targetId);
    }

    private async Task Submit()
    {
        if (Model != null)
        {
            var testId = new Guid("839C1D11-5DC5-48FC-B203-7E2F1566D861");
            test = await SessionRepository.GetTestById(testId);
            TestInstance testInstance = await SessionRepository.CreateTestInstance(test);

            NavigationManager.NavigateTo("/latest-result/" + testInstance.Id);
        }
    }
}
